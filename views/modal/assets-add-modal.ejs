<div id="assets-add-modal" class="modal">
    <div class="modal-header">
        <div class="title">Add Asset</div>
        <button data-modal-close-button class="close-button">&times;</button>
    </div>
    <div class="modal-content">
        <form id="assets-add-form" class="modal-form" autocomplete="off">
            <div>
                <label for="kind">Kind</label>
                <select id="kind" autofocus>
                    <option value="Stock">Stock</option>
                    <option value="Crypto">Crypto</option>
                    <option value="Cash">Cash</option>
                </select>
                <div class="kind error"></div>
            </div>
            <div id="entry-stock-div">
                <label for="ticker">Ticker</label>
                <input type="text" id="ticker" placeholder="Stock ticker (eg. MSFT)"/>
                <div class="ticker error"></div>
            </div>
            <div id="entry-crypto-div">
                <label for="fromCrypto">Crypto</label>
                <input type="text" id="fromCrypto" placeholder="Crypto symbol (eg. ETH)"/>
                <div class="fromCrypto error"></div>
            </div>
            <div id="entry-cash-div">
                <label for="fromCurrency">Currency</label>
                <select id="fromCurrency">
                <% currencies.forEach(currency => { %>
                    <option value="<%- currency.short %>"><%- currency.long %> (<%- currency.symbol %>)</option>
                <% }); %>
                </select>
                <div class="fromCurrency error"></div>
            </div>
            <div class="mini-nav">
                <ul>
                    <li><button title="Add asset">Add</button></li>
                </ul>
            </div>
        </form>
    </div>
</div>

<script type="text/javascript">
    $("#kind").change(function () {
        if ($(this).val() == "Stock") {
            $('#entry-stock-div').show();
            $('#ticker').attr('required', '');
        } else {
            $('#entry-stock-div').hide();
            $('#ticker').removeAttr('required');
            $('#ticker').val('');
        }
        if ($(this).val() == "Crypto") {
            $('#entry-crypto-div').show();
            $('#fromCrypto').attr('required', '');
        } else {
            $('#entry-crypto-div').hide();
            $('#fromCrypto').removeAttr('required');
            $('#fromCrypto').val('');
        }
        if ($(this).val() == "Cash") {
            $('#entry-cash-div').show();
            $('#fromCurrency').attr('required', '');
        } else {
            $('#entry-cash-div').hide();
            $('#fromCurrency').removeAttr('required');
            $('#fromCurrency').val('');
        }
    });
    $("#kind").trigger("change");
</script>
    
<script type="text/javascript">
    var assetsAddModal = document.getElementById("assets-add-modal");
    var assetsAddForm = document.getElementById("assets-add-form");
    assetsAddForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        // get elements
        const kindError = document.querySelector('#assets-add-form .kind.error');
        const tickerError = document.querySelector('#assets-add-form .ticker.error');
        const fromCryptoError = document.querySelector('#assets-add-form .fromCrypto.error');
        const fromCurrencyError = document.querySelector('#assets-add-form .fromCurrency.error');
        
        // reset errors
        kindError.textContent = '';
        tickerError.textContent = '';
        fromCryptoError.textContent = '';
        fromCurrencyError.textContent = '';
        
        // get values
        const kind = assetsAddForm.kind.value;
        const ticker = assetsAddForm.ticker.value;
        const fromCrypto = assetsAddForm.fromCrypto.value;
        const fromCurrency = assetsAddForm.fromCurrency.value;
        
        try {
            const res = await fetch('/portfolios/<%- portfolio._id %>/create', {
                method: 'POST',
                body: JSON.stringify({ kind, ticker, fromCrypto, fromCurrency }),
                headers: { 'Content-Type': 'application/json' }
            });
            const data = await res.json();
            console.log(data);
            if (data.errors) {
                kindError.textContent = data.errors.kind;
                tickerError.textContent = data.errors.ticker;
                fromCryptoError.textContent = data.errors.fromCrypto;
                fromCurrencyError.textContent = data.errors.fromCurrency;
            }
            if (data.asset) {
                closeModal(assetsAddModal);
                location.assign('/portfolios/<%- portfolio._id %>');
            }
        }
        catch (err) {
            console.log(err);
        }
    });
</script>
